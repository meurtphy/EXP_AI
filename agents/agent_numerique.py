class AgentNumerique:
    def __init__(self):
        """
        Initialise un modÃ¨le interne des nombres.
        Il comprend que chaque nombre est un ensemble d'unitÃ©s et que les nombres sont reliÃ©s par des relations mathÃ©matiques.
        """
        self.nombres = self.initialiser_nombres()

    def initialiser_nombres(self):
        """ CrÃ©e une structure interne qui reprÃ©sente les nombres comme des ensembles d'unitÃ©s. """
        nombres = {}
        for i in range(101):
            nombres[i] = list(range(1, i+1))  # Ex : 5 devient [1, 2, 3, 4, 5]
        return nombres

    def visualiser_nombre(self, n):
        """ Retourne une reprÃ©sentation visuelle du nombre (ex: 'ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢' pour 5). """
        return "ğŸŸ¢" * n

    def decomposer_nombre(self, n):
        """ Retourne toutes les faÃ§ons de dÃ©composer un nombre en deux parties. """
        decompositions = [(i, n-i) for i in range(1, n)]
        return decompositions

    def additionner(self, a, b):
        """
        Additionne deux nombres en manipulant directement leurs unitÃ©s.
        - Il rÃ©cupÃ¨re les objets de `a`
        - Il ajoute les objets de `b`
        - Il vÃ©rifie si le total correspond Ã  un nombre existant
        """
        total = len(self.nombres[a]) + len(self.nombres[b])
        return total if total in self.nombres else None
